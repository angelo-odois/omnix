// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= AUTH & USERS =============

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   // super_admin, tenant_admin, tenant_manager, tenant_operator
  tenantId  String?  @map("tenant_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@map("users")
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email, verified])
  @@map("otps")
}

// ============= TENANTS & PACKAGES =============

model Tenant {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  domain    String?  @unique
  packageId String   @map("package_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users         User[]
  tenantModules TenantModule[]
  moduleUsage   ModuleUsage[]
  whatsappInstances WhatsAppInstance[]
  contacts      Contact[]
  conversations Conversation[]
  workflows     Workflow[]

  @@map("tenants")
}

model Package {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String    @map("display_name")
  description String
  price       Decimal   @db.Decimal(10, 2)
  currency    String    @default("BRL")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("packages")
}

// ============= MODULES SYSTEM =============

model Module {
  id           String  @id
  name         String  @unique
  displayName  String  @map("display_name")
  description  String
  category     String
  isCore       Boolean @default(false) @map("is_core")
  isActive     Boolean @default(true) @map("is_active")
  icon         String
  color        String
  dependencies String[] // Array of module IDs
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tenantModules TenantModule[]
  moduleUsage   ModuleUsage[]

  @@map("modules")
}

model TenantModule {
  id         String   @id @default(cuid())
  tenantId   String   @map("tenant_id")
  moduleId   String   @map("module_id")
  isEnabled  Boolean  @default(true) @map("is_enabled")
  isActive   Boolean  @default(true) @map("is_active")
  config     Json     @default("{}")
  activatedBy String?  @map("activated_by")
  activatedAt DateTime @default(now()) @map("activated_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([tenantId, moduleId])
  @@map("tenant_modules")
}

model ModuleUsage {
  id        String   @id @default(cuid())
  tenantId  String   @map("tenant_id")
  moduleId  String   @map("module_id")
  event     String   // request, storage, instance, etc.
  value     Int      @default(1)
  metadata  Json?    @default("{}")
  timestamp DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([tenantId, moduleId, timestamp])
  @@map("module_usage")
}

// ============= WHATSAPP MODULE =============

model WhatsAppInstance {
  id           String   @id @default(cuid())
  tenantId     String   @map("tenant_id")
  name         String
  phoneNumber  String?  @map("phone_number")
  status       String   @default("disconnected") // disconnected, connecting, connected, error
  qrCode       String?  @map("qr_code")
  webhookUrl   String?  @map("webhook_url")
  lastSeen     DateTime? @map("last_seen")
  settings     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@unique([tenantId, name])
  @@map("whatsapp_instances")
}

// ============= MESSAGES & CONVERSATIONS =============

model Conversation {
  id                String   @id @default(cuid())
  tenantId          String   @map("tenant_id")
  whatsappInstanceId String?  @map("whatsapp_instance_id")
  contactPhone      String   @map("contact_phone")
  contactName       String?  @map("contact_name")
  lastMessageAt     DateTime @map("last_message_at")
  unreadCount       Int      @default(0) @map("unread_count")
  isArchived        Boolean  @default(false) @map("is_archived")
  tags              String[] @default([])
  metadata          Json?    @default("{}")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  whatsappInstance  WhatsAppInstance? @relation(fields: [whatsappInstanceId], references: [id], onDelete: SetNull)
  messages          Message[]

  @@unique([tenantId, contactPhone])
  @@index([tenantId, lastMessageAt])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String   @map("conversation_id")
  tenantId       String   @map("tenant_id")
  from           String
  to             String
  type           String   // text, image, document, audio, video
  content        String
  mediaUrl       String?  @map("media_url")
  status         String   @default("sent") // sent, delivered, read, failed
  isInbound      Boolean  @map("is_inbound")
  timestamp      DateTime
  metadata       Json?    @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, timestamp])
  @@index([tenantId, timestamp])
  @@map("messages")
}

// ============= CONTACTS MODULE =============

model Contact {
  id           String   @id @default(cuid())
  tenantId     String   @map("tenant_id")
  name         String
  phone        String
  email        String?
  avatar       String?
  tags         String[] @default([])
  customFields Json?    @map("custom_fields") @default("{}")
  groups       String[] @default([])
  isBlocked    Boolean  @default(false) @map("is_blocked")
  lastContact  DateTime? @map("last_contact")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, phone])
  @@index([tenantId, name])
  @@map("contacts")
}

// ============= WORKFLOWS MODULE =============

model Workflow {
  id          String   @id @default(cuid())
  tenantId    String   @map("tenant_id")
  name        String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  triggers    Json     @default("[]")
  actions     Json     @default("[]")
  conditions  Json     @default("[]")
  variables   Json     @default("{}")
  createdBy   String   @map("created_by")
  executionCount Int   @default(0) @map("execution_count")
  lastExecuted   DateTime? @map("last_executed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tenant           Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workflowExecutions WorkflowExecution[]

  @@map("workflows")
}

model WorkflowExecution {
  id         String   @id @default(cuid())
  workflowId String   @map("workflow_id")
  tenantId   String   @map("tenant_id")
  status     String   // running, completed, failed, cancelled
  startedAt  DateTime @map("started_at")
  completedAt DateTime? @map("completed_at")
  result     Json?    @default("{}")
  logs       Json[]   @default([])
  metadata   Json?    @default("{}")

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([tenantId, startedAt])
  @@map("workflow_executions")
}